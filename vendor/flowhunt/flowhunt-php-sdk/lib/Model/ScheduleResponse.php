<?php
/**
 * ScheduleResponse
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FlowHunt
 *
 * FlowHunt API
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.7.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ScheduleResponse Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ScheduleResponse implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ScheduleResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'workspace_id' => 'string',
        'schedule_id' => 'string',
        'url' => 'string',
        'frequency' => '\OpenAPI\Client\Model\ScheduleFrequency',
        'schedule_type' => '\OpenAPI\Client\Model\ScheduleType',
        'start_time' => '\DateTime',
        'end_time' => '\DateTime',
        'status' => '\OpenAPI\Client\Model\ScheduleStatus',
        'status_message' => 'string',
        'cnt_scheduled' => 'int',
        'cnt_completed' => 'int',
        'cnt_failed' => 'int',
        'with_screenshot' => '\OpenAPI\Client\Model\BoolChar',
        'with_proxy_rotation' => '\OpenAPI\Client\Model\BoolChar'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'workspace_id' => null,
        'schedule_id' => null,
        'url' => null,
        'frequency' => null,
        'schedule_type' => null,
        'start_time' => 'date-time',
        'end_time' => 'date-time',
        'status' => null,
        'status_message' => null,
        'cnt_scheduled' => null,
        'cnt_completed' => null,
        'cnt_failed' => null,
        'with_screenshot' => null,
        'with_proxy_rotation' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'workspace_id' => false,
        'schedule_id' => false,
        'url' => false,
        'frequency' => false,
        'schedule_type' => false,
        'start_time' => true,
        'end_time' => true,
        'status' => false,
        'status_message' => true,
        'cnt_scheduled' => true,
        'cnt_completed' => true,
        'cnt_failed' => true,
        'with_screenshot' => true,
        'with_proxy_rotation' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'workspace_id' => 'workspace_id',
        'schedule_id' => 'schedule_id',
        'url' => 'url',
        'frequency' => 'frequency',
        'schedule_type' => 'schedule_type',
        'start_time' => 'start_time',
        'end_time' => 'end_time',
        'status' => 'status',
        'status_message' => 'status_message',
        'cnt_scheduled' => 'cnt_scheduled',
        'cnt_completed' => 'cnt_completed',
        'cnt_failed' => 'cnt_failed',
        'with_screenshot' => 'with_screenshot',
        'with_proxy_rotation' => 'with_proxy_rotation'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'workspace_id' => 'setWorkspaceId',
        'schedule_id' => 'setScheduleId',
        'url' => 'setUrl',
        'frequency' => 'setFrequency',
        'schedule_type' => 'setScheduleType',
        'start_time' => 'setStartTime',
        'end_time' => 'setEndTime',
        'status' => 'setStatus',
        'status_message' => 'setStatusMessage',
        'cnt_scheduled' => 'setCntScheduled',
        'cnt_completed' => 'setCntCompleted',
        'cnt_failed' => 'setCntFailed',
        'with_screenshot' => 'setWithScreenshot',
        'with_proxy_rotation' => 'setWithProxyRotation'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'workspace_id' => 'getWorkspaceId',
        'schedule_id' => 'getScheduleId',
        'url' => 'getUrl',
        'frequency' => 'getFrequency',
        'schedule_type' => 'getScheduleType',
        'start_time' => 'getStartTime',
        'end_time' => 'getEndTime',
        'status' => 'getStatus',
        'status_message' => 'getStatusMessage',
        'cnt_scheduled' => 'getCntScheduled',
        'cnt_completed' => 'getCntCompleted',
        'cnt_failed' => 'getCntFailed',
        'with_screenshot' => 'getWithScreenshot',
        'with_proxy_rotation' => 'getWithProxyRotation'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('workspace_id', $data ?? [], null);
        $this->setIfExists('schedule_id', $data ?? [], null);
        $this->setIfExists('url', $data ?? [], null);
        $this->setIfExists('frequency', $data ?? [], null);
        $this->setIfExists('schedule_type', $data ?? [], null);
        $this->setIfExists('start_time', $data ?? [], null);
        $this->setIfExists('end_time', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('status_message', $data ?? [], null);
        $this->setIfExists('cnt_scheduled', $data ?? [], null);
        $this->setIfExists('cnt_completed', $data ?? [], null);
        $this->setIfExists('cnt_failed', $data ?? [], null);
        $this->setIfExists('with_screenshot', $data ?? [], null);
        $this->setIfExists('with_proxy_rotation', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['workspace_id'] === null) {
            $invalidProperties[] = "'workspace_id' can't be null";
        }
        if ($this->container['schedule_id'] === null) {
            $invalidProperties[] = "'schedule_id' can't be null";
        }
        if ($this->container['url'] === null) {
            $invalidProperties[] = "'url' can't be null";
        }
        if ($this->container['frequency'] === null) {
            $invalidProperties[] = "'frequency' can't be null";
        }
        if ($this->container['schedule_type'] === null) {
            $invalidProperties[] = "'schedule_type' can't be null";
        }
        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        if ($this->container['cnt_scheduled'] === null) {
            $invalidProperties[] = "'cnt_scheduled' can't be null";
        }
        if ($this->container['cnt_completed'] === null) {
            $invalidProperties[] = "'cnt_completed' can't be null";
        }
        if ($this->container['cnt_failed'] === null) {
            $invalidProperties[] = "'cnt_failed' can't be null";
        }
        if ($this->container['with_screenshot'] === null) {
            $invalidProperties[] = "'with_screenshot' can't be null";
        }
        if ($this->container['with_proxy_rotation'] === null) {
            $invalidProperties[] = "'with_proxy_rotation' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets workspace_id
     *
     * @return string
     */
    public function getWorkspaceId()
    {
        return $this->container['workspace_id'];
    }

    /**
     * Sets workspace_id
     *
     * @param string $workspace_id Workspace ID
     *
     * @return self
     */
    public function setWorkspaceId($workspace_id)
    {
        if (is_null($workspace_id)) {
            throw new \InvalidArgumentException('non-nullable workspace_id cannot be null');
        }
        $this->container['workspace_id'] = $workspace_id;

        return $this;
    }

    /**
     * Gets schedule_id
     *
     * @return string
     */
    public function getScheduleId()
    {
        return $this->container['schedule_id'];
    }

    /**
     * Sets schedule_id
     *
     * @param string $schedule_id Schedule ID
     *
     * @return self
     */
    public function setScheduleId($schedule_id)
    {
        if (is_null($schedule_id)) {
            throw new \InvalidArgumentException('non-nullable schedule_id cannot be null');
        }
        $this->container['schedule_id'] = $schedule_id;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string $url URL to be scheduled
     *
     * @return self
     */
    public function setUrl($url)
    {
        if (is_null($url)) {
            throw new \InvalidArgumentException('non-nullable url cannot be null');
        }
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets frequency
     *
     * @return \OpenAPI\Client\Model\ScheduleFrequency
     */
    public function getFrequency()
    {
        return $this->container['frequency'];
    }

    /**
     * Sets frequency
     *
     * @param \OpenAPI\Client\Model\ScheduleFrequency $frequency Frequency of the schedule D - Daily, W - Weekly, M - Monthly, Y - Yearly
     *
     * @return self
     */
    public function setFrequency($frequency)
    {
        if (is_null($frequency)) {
            throw new \InvalidArgumentException('non-nullable frequency cannot be null');
        }
        $this->container['frequency'] = $frequency;

        return $this;
    }

    /**
     * Gets schedule_type
     *
     * @return \OpenAPI\Client\Model\ScheduleType
     */
    public function getScheduleType()
    {
        return $this->container['schedule_type'];
    }

    /**
     * Sets schedule_type
     *
     * @param \OpenAPI\Client\Model\ScheduleType $schedule_type Type of the schedule (U - URL, D - Domain, S - Sitemap)
     *
     * @return self
     */
    public function setScheduleType($schedule_type)
    {
        if (is_null($schedule_type)) {
            throw new \InvalidArgumentException('non-nullable schedule_type cannot be null');
        }
        $this->container['schedule_type'] = $schedule_type;

        return $this;
    }

    /**
     * Gets start_time
     *
     * @return \DateTime|null
     */
    public function getStartTime()
    {
        return $this->container['start_time'];
    }

    /**
     * Sets start_time
     *
     * @param \DateTime|null $start_time start_time
     *
     * @return self
     */
    public function setStartTime($start_time)
    {
        if (is_null($start_time)) {
            array_push($this->openAPINullablesSetToNull, 'start_time');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('start_time', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['start_time'] = $start_time;

        return $this;
    }

    /**
     * Gets end_time
     *
     * @return \DateTime|null
     */
    public function getEndTime()
    {
        return $this->container['end_time'];
    }

    /**
     * Sets end_time
     *
     * @param \DateTime|null $end_time end_time
     *
     * @return self
     */
    public function setEndTime($end_time)
    {
        if (is_null($end_time)) {
            array_push($this->openAPINullablesSetToNull, 'end_time');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('end_time', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['end_time'] = $end_time;

        return $this;
    }

    /**
     * Gets status
     *
     * @return \OpenAPI\Client\Model\ScheduleStatus
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \OpenAPI\Client\Model\ScheduleStatus $status Status of the schedule (N - New, F - Finished, P - Pending, E - Error, C - Cancelled
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets status_message
     *
     * @return string|null
     */
    public function getStatusMessage()
    {
        return $this->container['status_message'];
    }

    /**
     * Sets status_message
     *
     * @param string|null $status_message status_message
     *
     * @return self
     */
    public function setStatusMessage($status_message)
    {
        if (is_null($status_message)) {
            array_push($this->openAPINullablesSetToNull, 'status_message');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('status_message', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['status_message'] = $status_message;

        return $this;
    }

    /**
     * Gets cnt_scheduled
     *
     * @return int
     */
    public function getCntScheduled()
    {
        return $this->container['cnt_scheduled'];
    }

    /**
     * Sets cnt_scheduled
     *
     * @param int $cnt_scheduled cnt_scheduled
     *
     * @return self
     */
    public function setCntScheduled($cnt_scheduled)
    {
        if (is_null($cnt_scheduled)) {
            array_push($this->openAPINullablesSetToNull, 'cnt_scheduled');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cnt_scheduled', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['cnt_scheduled'] = $cnt_scheduled;

        return $this;
    }

    /**
     * Gets cnt_completed
     *
     * @return int
     */
    public function getCntCompleted()
    {
        return $this->container['cnt_completed'];
    }

    /**
     * Sets cnt_completed
     *
     * @param int $cnt_completed cnt_completed
     *
     * @return self
     */
    public function setCntCompleted($cnt_completed)
    {
        if (is_null($cnt_completed)) {
            array_push($this->openAPINullablesSetToNull, 'cnt_completed');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cnt_completed', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['cnt_completed'] = $cnt_completed;

        return $this;
    }

    /**
     * Gets cnt_failed
     *
     * @return int
     */
    public function getCntFailed()
    {
        return $this->container['cnt_failed'];
    }

    /**
     * Sets cnt_failed
     *
     * @param int $cnt_failed cnt_failed
     *
     * @return self
     */
    public function setCntFailed($cnt_failed)
    {
        if (is_null($cnt_failed)) {
            array_push($this->openAPINullablesSetToNull, 'cnt_failed');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cnt_failed', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['cnt_failed'] = $cnt_failed;

        return $this;
    }

    /**
     * Gets with_screenshot
     *
     * @return \OpenAPI\Client\Model\BoolChar
     */
    public function getWithScreenshot()
    {
        return $this->container['with_screenshot'];
    }

    /**
     * Sets with_screenshot
     *
     * @param \OpenAPI\Client\Model\BoolChar $with_screenshot with_screenshot
     *
     * @return self
     */
    public function setWithScreenshot($with_screenshot)
    {
        if (is_null($with_screenshot)) {
            array_push($this->openAPINullablesSetToNull, 'with_screenshot');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('with_screenshot', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['with_screenshot'] = $with_screenshot;

        return $this;
    }

    /**
     * Gets with_proxy_rotation
     *
     * @return \OpenAPI\Client\Model\BoolChar
     */
    public function getWithProxyRotation()
    {
        return $this->container['with_proxy_rotation'];
    }

    /**
     * Sets with_proxy_rotation
     *
     * @param \OpenAPI\Client\Model\BoolChar $with_proxy_rotation with_proxy_rotation
     *
     * @return self
     */
    public function setWithProxyRotation($with_proxy_rotation)
    {
        if (is_null($with_proxy_rotation)) {
            array_push($this->openAPINullablesSetToNull, 'with_proxy_rotation');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('with_proxy_rotation', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['with_proxy_rotation'] = $with_proxy_rotation;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


