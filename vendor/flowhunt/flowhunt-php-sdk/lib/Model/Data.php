<?php
/**
 * Data
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FlowHunt
 *
 * FlowHunt API
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.7.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * Data Class Doc Comment
 *
 * @category Class
 * @description Document linked to vector
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Data implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Data';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'schedule_id' => 'string',
        'domain_id' => 'string',
        'url_id' => 'string',
        'url' => 'string',
        'last_text_timestamp' => '\DateTime',
        'page_screenshot' => '\OpenAPI\Client\Model\UrlScreenshotResponse',
        'url_title' => 'string',
        'url_meta_description' => 'string',
        'url_og_image' => 'string',
        'is_original_url' => 'bool',
        'dest_url_id' => 'string',
        'created_at' => '\DateTime',
        'url_text' => 'array<string,string>[]',
        'faq_id' => 'string',
        'workspace_id' => 'string',
        'cat_id' => 'string',
        'question' => 'string',
        'answer' => 'string',
        'parent_faq_id' => 'string',
        'status' => 'string',
        'updated_at' => '\DateTime',
        'indexed_at' => '\DateTime',
        'doc_id' => 'string',
        'doc_name' => 'string',
        'doc_type' => 'string',
        'user_status' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'schedule_id' => null,
        'domain_id' => null,
        'url_id' => null,
        'url' => null,
        'last_text_timestamp' => 'date-time',
        'page_screenshot' => null,
        'url_title' => null,
        'url_meta_description' => null,
        'url_og_image' => null,
        'is_original_url' => null,
        'dest_url_id' => null,
        'created_at' => 'date-time',
        'url_text' => null,
        'faq_id' => null,
        'workspace_id' => null,
        'cat_id' => null,
        'question' => null,
        'answer' => null,
        'parent_faq_id' => null,
        'status' => null,
        'updated_at' => 'date-time',
        'indexed_at' => 'date-time',
        'doc_id' => null,
        'doc_name' => null,
        'doc_type' => null,
        'user_status' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'schedule_id' => false,
        'domain_id' => false,
        'url_id' => false,
        'url' => false,
        'last_text_timestamp' => false,
        'page_screenshot' => false,
        'url_title' => false,
        'url_meta_description' => false,
        'url_og_image' => false,
        'is_original_url' => false,
        'dest_url_id' => false,
        'created_at' => false,
        'url_text' => false,
        'faq_id' => false,
        'workspace_id' => false,
        'cat_id' => false,
        'question' => false,
        'answer' => false,
        'parent_faq_id' => false,
        'status' => false,
        'updated_at' => false,
        'indexed_at' => false,
        'doc_id' => false,
        'doc_name' => false,
        'doc_type' => false,
        'user_status' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'schedule_id' => 'schedule_id',
        'domain_id' => 'domain_id',
        'url_id' => 'url_id',
        'url' => 'url',
        'last_text_timestamp' => 'last_text_timestamp',
        'page_screenshot' => 'page_screenshot',
        'url_title' => 'url_title',
        'url_meta_description' => 'url_meta_description',
        'url_og_image' => 'url_og_image',
        'is_original_url' => 'is_original_url',
        'dest_url_id' => 'dest_url_id',
        'created_at' => 'created_at',
        'url_text' => 'url_text',
        'faq_id' => 'faq_id',
        'workspace_id' => 'workspace_id',
        'cat_id' => 'cat_id',
        'question' => 'question',
        'answer' => 'answer',
        'parent_faq_id' => 'parent_faq_id',
        'status' => 'status',
        'updated_at' => 'updated_at',
        'indexed_at' => 'indexed_at',
        'doc_id' => 'doc_id',
        'doc_name' => 'doc_name',
        'doc_type' => 'doc_type',
        'user_status' => 'user_status'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'schedule_id' => 'setScheduleId',
        'domain_id' => 'setDomainId',
        'url_id' => 'setUrlId',
        'url' => 'setUrl',
        'last_text_timestamp' => 'setLastTextTimestamp',
        'page_screenshot' => 'setPageScreenshot',
        'url_title' => 'setUrlTitle',
        'url_meta_description' => 'setUrlMetaDescription',
        'url_og_image' => 'setUrlOgImage',
        'is_original_url' => 'setIsOriginalUrl',
        'dest_url_id' => 'setDestUrlId',
        'created_at' => 'setCreatedAt',
        'url_text' => 'setUrlText',
        'faq_id' => 'setFaqId',
        'workspace_id' => 'setWorkspaceId',
        'cat_id' => 'setCatId',
        'question' => 'setQuestion',
        'answer' => 'setAnswer',
        'parent_faq_id' => 'setParentFaqId',
        'status' => 'setStatus',
        'updated_at' => 'setUpdatedAt',
        'indexed_at' => 'setIndexedAt',
        'doc_id' => 'setDocId',
        'doc_name' => 'setDocName',
        'doc_type' => 'setDocType',
        'user_status' => 'setUserStatus'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'schedule_id' => 'getScheduleId',
        'domain_id' => 'getDomainId',
        'url_id' => 'getUrlId',
        'url' => 'getUrl',
        'last_text_timestamp' => 'getLastTextTimestamp',
        'page_screenshot' => 'getPageScreenshot',
        'url_title' => 'getUrlTitle',
        'url_meta_description' => 'getUrlMetaDescription',
        'url_og_image' => 'getUrlOgImage',
        'is_original_url' => 'getIsOriginalUrl',
        'dest_url_id' => 'getDestUrlId',
        'created_at' => 'getCreatedAt',
        'url_text' => 'getUrlText',
        'faq_id' => 'getFaqId',
        'workspace_id' => 'getWorkspaceId',
        'cat_id' => 'getCatId',
        'question' => 'getQuestion',
        'answer' => 'getAnswer',
        'parent_faq_id' => 'getParentFaqId',
        'status' => 'getStatus',
        'updated_at' => 'getUpdatedAt',
        'indexed_at' => 'getIndexedAt',
        'doc_id' => 'getDocId',
        'doc_name' => 'getDocName',
        'doc_type' => 'getDocType',
        'user_status' => 'getUserStatus'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('schedule_id', $data ?? [], null);
        $this->setIfExists('domain_id', $data ?? [], null);
        $this->setIfExists('url_id', $data ?? [], null);
        $this->setIfExists('url', $data ?? [], null);
        $this->setIfExists('last_text_timestamp', $data ?? [], null);
        $this->setIfExists('page_screenshot', $data ?? [], null);
        $this->setIfExists('url_title', $data ?? [], null);
        $this->setIfExists('url_meta_description', $data ?? [], null);
        $this->setIfExists('url_og_image', $data ?? [], null);
        $this->setIfExists('is_original_url', $data ?? [], null);
        $this->setIfExists('dest_url_id', $data ?? [], null);
        $this->setIfExists('created_at', $data ?? [], null);
        $this->setIfExists('url_text', $data ?? [], null);
        $this->setIfExists('faq_id', $data ?? [], null);
        $this->setIfExists('workspace_id', $data ?? [], null);
        $this->setIfExists('cat_id', $data ?? [], null);
        $this->setIfExists('question', $data ?? [], null);
        $this->setIfExists('answer', $data ?? [], null);
        $this->setIfExists('parent_faq_id', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('updated_at', $data ?? [], null);
        $this->setIfExists('indexed_at', $data ?? [], null);
        $this->setIfExists('doc_id', $data ?? [], null);
        $this->setIfExists('doc_name', $data ?? [], null);
        $this->setIfExists('doc_type', $data ?? [], null);
        $this->setIfExists('user_status', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['schedule_id'] === null) {
            $invalidProperties[] = "'schedule_id' can't be null";
        }
        if ($this->container['domain_id'] === null) {
            $invalidProperties[] = "'domain_id' can't be null";
        }
        if ($this->container['url_id'] === null) {
            $invalidProperties[] = "'url_id' can't be null";
        }
        if ($this->container['url'] === null) {
            $invalidProperties[] = "'url' can't be null";
        }
        if ($this->container['last_text_timestamp'] === null) {
            $invalidProperties[] = "'last_text_timestamp' can't be null";
        }
        if ($this->container['page_screenshot'] === null) {
            $invalidProperties[] = "'page_screenshot' can't be null";
        }
        if ($this->container['url_title'] === null) {
            $invalidProperties[] = "'url_title' can't be null";
        }
        if ($this->container['url_meta_description'] === null) {
            $invalidProperties[] = "'url_meta_description' can't be null";
        }
        if ($this->container['url_og_image'] === null) {
            $invalidProperties[] = "'url_og_image' can't be null";
        }
        if ($this->container['is_original_url'] === null) {
            $invalidProperties[] = "'is_original_url' can't be null";
        }
        if ($this->container['dest_url_id'] === null) {
            $invalidProperties[] = "'dest_url_id' can't be null";
        }
        if ($this->container['created_at'] === null) {
            $invalidProperties[] = "'created_at' can't be null";
        }
        if ($this->container['url_text'] === null) {
            $invalidProperties[] = "'url_text' can't be null";
        }
        if ($this->container['faq_id'] === null) {
            $invalidProperties[] = "'faq_id' can't be null";
        }
        if ($this->container['workspace_id'] === null) {
            $invalidProperties[] = "'workspace_id' can't be null";
        }
        if ($this->container['cat_id'] === null) {
            $invalidProperties[] = "'cat_id' can't be null";
        }
        if ($this->container['question'] === null) {
            $invalidProperties[] = "'question' can't be null";
        }
        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        if ($this->container['updated_at'] === null) {
            $invalidProperties[] = "'updated_at' can't be null";
        }
        if ($this->container['doc_id'] === null) {
            $invalidProperties[] = "'doc_id' can't be null";
        }
        if ($this->container['doc_name'] === null) {
            $invalidProperties[] = "'doc_name' can't be null";
        }
        if ($this->container['doc_type'] === null) {
            $invalidProperties[] = "'doc_type' can't be null";
        }
        if ($this->container['user_status'] === null) {
            $invalidProperties[] = "'user_status' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets schedule_id
     *
     * @return string
     */
    public function getScheduleId()
    {
        return $this->container['schedule_id'];
    }

    /**
     * Sets schedule_id
     *
     * @param string $schedule_id schedule_id
     *
     * @return self
     */
    public function setScheduleId($schedule_id)
    {
        if (is_null($schedule_id)) {
            throw new \InvalidArgumentException('non-nullable schedule_id cannot be null');
        }
        $this->container['schedule_id'] = $schedule_id;

        return $this;
    }

    /**
     * Gets domain_id
     *
     * @return string
     */
    public function getDomainId()
    {
        return $this->container['domain_id'];
    }

    /**
     * Sets domain_id
     *
     * @param string $domain_id domain_id
     *
     * @return self
     */
    public function setDomainId($domain_id)
    {
        if (is_null($domain_id)) {
            throw new \InvalidArgumentException('non-nullable domain_id cannot be null');
        }
        $this->container['domain_id'] = $domain_id;

        return $this;
    }

    /**
     * Gets url_id
     *
     * @return string
     */
    public function getUrlId()
    {
        return $this->container['url_id'];
    }

    /**
     * Sets url_id
     *
     * @param string $url_id url_id
     *
     * @return self
     */
    public function setUrlId($url_id)
    {
        if (is_null($url_id)) {
            throw new \InvalidArgumentException('non-nullable url_id cannot be null');
        }
        $this->container['url_id'] = $url_id;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string $url url
     *
     * @return self
     */
    public function setUrl($url)
    {
        if (is_null($url)) {
            throw new \InvalidArgumentException('non-nullable url cannot be null');
        }
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets last_text_timestamp
     *
     * @return \DateTime
     */
    public function getLastTextTimestamp()
    {
        return $this->container['last_text_timestamp'];
    }

    /**
     * Sets last_text_timestamp
     *
     * @param \DateTime $last_text_timestamp last_text_timestamp
     *
     * @return self
     */
    public function setLastTextTimestamp($last_text_timestamp)
    {
        if (is_null($last_text_timestamp)) {
            throw new \InvalidArgumentException('non-nullable last_text_timestamp cannot be null');
        }
        $this->container['last_text_timestamp'] = $last_text_timestamp;

        return $this;
    }

    /**
     * Gets page_screenshot
     *
     * @return \OpenAPI\Client\Model\UrlScreenshotResponse
     */
    public function getPageScreenshot()
    {
        return $this->container['page_screenshot'];
    }

    /**
     * Sets page_screenshot
     *
     * @param \OpenAPI\Client\Model\UrlScreenshotResponse $page_screenshot page_screenshot
     *
     * @return self
     */
    public function setPageScreenshot($page_screenshot)
    {
        if (is_null($page_screenshot)) {
            throw new \InvalidArgumentException('non-nullable page_screenshot cannot be null');
        }
        $this->container['page_screenshot'] = $page_screenshot;

        return $this;
    }

    /**
     * Gets url_title
     *
     * @return string
     */
    public function getUrlTitle()
    {
        return $this->container['url_title'];
    }

    /**
     * Sets url_title
     *
     * @param string $url_title url_title
     *
     * @return self
     */
    public function setUrlTitle($url_title)
    {
        if (is_null($url_title)) {
            throw new \InvalidArgumentException('non-nullable url_title cannot be null');
        }
        $this->container['url_title'] = $url_title;

        return $this;
    }

    /**
     * Gets url_meta_description
     *
     * @return string
     */
    public function getUrlMetaDescription()
    {
        return $this->container['url_meta_description'];
    }

    /**
     * Sets url_meta_description
     *
     * @param string $url_meta_description url_meta_description
     *
     * @return self
     */
    public function setUrlMetaDescription($url_meta_description)
    {
        if (is_null($url_meta_description)) {
            throw new \InvalidArgumentException('non-nullable url_meta_description cannot be null');
        }
        $this->container['url_meta_description'] = $url_meta_description;

        return $this;
    }

    /**
     * Gets url_og_image
     *
     * @return string
     */
    public function getUrlOgImage()
    {
        return $this->container['url_og_image'];
    }

    /**
     * Sets url_og_image
     *
     * @param string $url_og_image url_og_image
     *
     * @return self
     */
    public function setUrlOgImage($url_og_image)
    {
        if (is_null($url_og_image)) {
            throw new \InvalidArgumentException('non-nullable url_og_image cannot be null');
        }
        $this->container['url_og_image'] = $url_og_image;

        return $this;
    }

    /**
     * Gets is_original_url
     *
     * @return bool
     */
    public function getIsOriginalUrl()
    {
        return $this->container['is_original_url'];
    }

    /**
     * Sets is_original_url
     *
     * @param bool $is_original_url is_original_url
     *
     * @return self
     */
    public function setIsOriginalUrl($is_original_url)
    {
        if (is_null($is_original_url)) {
            throw new \InvalidArgumentException('non-nullable is_original_url cannot be null');
        }
        $this->container['is_original_url'] = $is_original_url;

        return $this;
    }

    /**
     * Gets dest_url_id
     *
     * @return string
     */
    public function getDestUrlId()
    {
        return $this->container['dest_url_id'];
    }

    /**
     * Sets dest_url_id
     *
     * @param string $dest_url_id dest_url_id
     *
     * @return self
     */
    public function setDestUrlId($dest_url_id)
    {
        if (is_null($dest_url_id)) {
            throw new \InvalidArgumentException('non-nullable dest_url_id cannot be null');
        }
        $this->container['dest_url_id'] = $dest_url_id;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime $created_at created_at
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        if (is_null($created_at)) {
            throw new \InvalidArgumentException('non-nullable created_at cannot be null');
        }
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets url_text
     *
     * @return array<string,string>[]
     */
    public function getUrlText()
    {
        return $this->container['url_text'];
    }

    /**
     * Sets url_text
     *
     * @param array<string,string>[] $url_text url_text
     *
     * @return self
     */
    public function setUrlText($url_text)
    {
        if (is_null($url_text)) {
            throw new \InvalidArgumentException('non-nullable url_text cannot be null');
        }
        $this->container['url_text'] = $url_text;

        return $this;
    }

    /**
     * Gets faq_id
     *
     * @return string
     */
    public function getFaqId()
    {
        return $this->container['faq_id'];
    }

    /**
     * Sets faq_id
     *
     * @param string $faq_id FAQ ID
     *
     * @return self
     */
    public function setFaqId($faq_id)
    {
        if (is_null($faq_id)) {
            throw new \InvalidArgumentException('non-nullable faq_id cannot be null');
        }
        $this->container['faq_id'] = $faq_id;

        return $this;
    }

    /**
     * Gets workspace_id
     *
     * @return string
     */
    public function getWorkspaceId()
    {
        return $this->container['workspace_id'];
    }

    /**
     * Sets workspace_id
     *
     * @param string $workspace_id Workspace ID
     *
     * @return self
     */
    public function setWorkspaceId($workspace_id)
    {
        if (is_null($workspace_id)) {
            throw new \InvalidArgumentException('non-nullable workspace_id cannot be null');
        }
        $this->container['workspace_id'] = $workspace_id;

        return $this;
    }

    /**
     * Gets cat_id
     *
     * @return string
     */
    public function getCatId()
    {
        return $this->container['cat_id'];
    }

    /**
     * Sets cat_id
     *
     * @param string $cat_id Category ID
     *
     * @return self
     */
    public function setCatId($cat_id)
    {
        if (is_null($cat_id)) {
            throw new \InvalidArgumentException('non-nullable cat_id cannot be null');
        }
        $this->container['cat_id'] = $cat_id;

        return $this;
    }

    /**
     * Gets question
     *
     * @return string
     */
    public function getQuestion()
    {
        return $this->container['question'];
    }

    /**
     * Sets question
     *
     * @param string $question Question
     *
     * @return self
     */
    public function setQuestion($question)
    {
        if (is_null($question)) {
            throw new \InvalidArgumentException('non-nullable question cannot be null');
        }
        $this->container['question'] = $question;

        return $this;
    }

    /**
     * Gets answer
     *
     * @return string|null
     */
    public function getAnswer()
    {
        return $this->container['answer'];
    }

    /**
     * Sets answer
     *
     * @param string|null $answer answer
     *
     * @return self
     */
    public function setAnswer($answer)
    {
        if (is_null($answer)) {
            throw new \InvalidArgumentException('non-nullable answer cannot be null');
        }
        $this->container['answer'] = $answer;

        return $this;
    }

    /**
     * Gets parent_faq_id
     *
     * @return string|null
     */
    public function getParentFaqId()
    {
        return $this->container['parent_faq_id'];
    }

    /**
     * Sets parent_faq_id
     *
     * @param string|null $parent_faq_id parent_faq_id
     *
     * @return self
     */
    public function setParentFaqId($parent_faq_id)
    {
        if (is_null($parent_faq_id)) {
            throw new \InvalidArgumentException('non-nullable parent_faq_id cannot be null');
        }
        $this->container['parent_faq_id'] = $parent_faq_id;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status Document status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return \DateTime
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param \DateTime $updated_at Document updated at
     *
     * @return self
     */
    public function setUpdatedAt($updated_at)
    {
        if (is_null($updated_at)) {
            throw new \InvalidArgumentException('non-nullable updated_at cannot be null');
        }
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets indexed_at
     *
     * @return \DateTime|null
     */
    public function getIndexedAt()
    {
        return $this->container['indexed_at'];
    }

    /**
     * Sets indexed_at
     *
     * @param \DateTime|null $indexed_at indexed_at
     *
     * @return self
     */
    public function setIndexedAt($indexed_at)
    {
        if (is_null($indexed_at)) {
            throw new \InvalidArgumentException('non-nullable indexed_at cannot be null');
        }
        $this->container['indexed_at'] = $indexed_at;

        return $this;
    }

    /**
     * Gets doc_id
     *
     * @return string
     */
    public function getDocId()
    {
        return $this->container['doc_id'];
    }

    /**
     * Sets doc_id
     *
     * @param string $doc_id Document ID
     *
     * @return self
     */
    public function setDocId($doc_id)
    {
        if (is_null($doc_id)) {
            throw new \InvalidArgumentException('non-nullable doc_id cannot be null');
        }
        $this->container['doc_id'] = $doc_id;

        return $this;
    }

    /**
     * Gets doc_name
     *
     * @return string
     */
    public function getDocName()
    {
        return $this->container['doc_name'];
    }

    /**
     * Sets doc_name
     *
     * @param string $doc_name Document name
     *
     * @return self
     */
    public function setDocName($doc_name)
    {
        if (is_null($doc_name)) {
            throw new \InvalidArgumentException('non-nullable doc_name cannot be null');
        }
        $this->container['doc_name'] = $doc_name;

        return $this;
    }

    /**
     * Gets doc_type
     *
     * @return string
     */
    public function getDocType()
    {
        return $this->container['doc_type'];
    }

    /**
     * Sets doc_type
     *
     * @param string $doc_type Document type
     *
     * @return self
     */
    public function setDocType($doc_type)
    {
        if (is_null($doc_type)) {
            throw new \InvalidArgumentException('non-nullable doc_type cannot be null');
        }
        $this->container['doc_type'] = $doc_type;

        return $this;
    }

    /**
     * Gets user_status
     *
     * @return string
     */
    public function getUserStatus()
    {
        return $this->container['user_status'];
    }

    /**
     * Sets user_status
     *
     * @param string $user_status User status
     *
     * @return self
     */
    public function setUserStatus($user_status)
    {
        if (is_null($user_status)) {
            throw new \InvalidArgumentException('non-nullable user_status cannot be null');
        }
        $this->container['user_status'] = $user_status;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


